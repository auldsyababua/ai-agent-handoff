#!/bin/bash
# post-commit hook for AI Agent Handoff System
# Automatically adds an entry to dev_log.md after each commit

# Exit on error
set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
DEV_LOG_PATH="docs/dev_log.md"
EDITOR=${EDITOR:-nano}

# Get the most recent commit hash (first 7 characters)
COMMIT_HASH=$(git rev-parse --short HEAD)

# Get the commit message
COMMIT_MSG=$(git log -1 --pretty=%B)

# Get the current date and time
TIMESTAMP=$(date "+%Y-%m-%d %H:%M")

# Create a template for the dev log entry
TEMPLATE="### $TIMESTAMP - Commit: $COMMIT_HASH\n- What: \n- Why: \n- Issues: \n- Next: \n\n"

# Determine if dev_log.md exists
if [ ! -f "$DEV_LOG_PATH" ]; then
    echo -e "${YELLOW}Warning: $DEV_LOG_PATH does not exist. Creating it...${NC}"
    mkdir -p $(dirname "$DEV_LOG_PATH")
    echo "# Development Log" > "$DEV_LOG_PATH"
    echo "" >> "$DEV_LOG_PATH"
    echo "## Current State Summary" >> "$DEV_LOG_PATH"
    echo "" >> "$DEV_LOG_PATH"
    echo "- **Last Stable Commit**: $COMMIT_HASH" >> "$DEV_LOG_PATH"
    echo "- **Working Features**: " >> "$DEV_LOG_PATH"
    echo "- **In Progress**: " >> "$DEV_LOG_PATH"
    echo "- **Known Issues**: " >> "$DEV_LOG_PATH"
    echo "- **Next Tasks**: " >> "$DEV_LOG_PATH"
    echo "" >> "$DEV_LOG_PATH"
    echo "## Development History" >> "$DEV_LOG_PATH"
    echo "" >> "$DEV_LOG_PATH"
fi

# Create a temporary file for the dev log entry
TEMP_FILE=$(mktemp)
echo -e "$TEMPLATE" > "$TEMP_FILE"

# Prompt user to complete the entry
echo -e "${BLUE}Please complete the dev log entry for commit $COMMIT_HASH${NC}"
echo -e "${YELLOW}Commit message: ${NC}$COMMIT_MSG"
echo ""

# Determine how to handle the dev log entry
if [ -t 1 ]; then
    # Interactive terminal - open editor
    $EDITOR "$TEMP_FILE"
    
    # Read the edited content
    DEV_LOG_ENTRY=$(cat "$TEMP_FILE")
    
    # Insert at the beginning of the Development History section
    awk -v entry="$DEV_LOG_ENTRY" '
    /^## Development History/ {
        print $0;
        print "";
        print entry;
        next;
    }
    /^## Development History$/ {
        print $0;
        print "";
        print entry;
        next;
    }
    { print $0 }
    ' "$DEV_LOG_PATH" > "${DEV_LOG_PATH}.new"
    
    mv "${DEV_LOG_PATH}.new" "$DEV_LOG_PATH"
else
    # Non-interactive - append template with some automation
    DEV_LOG_ENTRY="### $TIMESTAMP - Commit: $COMMIT_HASH\n- What: $COMMIT_MSG\n- Why: Automated commit log\n- Issues: None recorded\n- Next: Continue development\n\n"
    
    # Insert at the beginning of the Development History section
    awk -v entry="$DEV_LOG_ENTRY" '
    /^## Development History/ {
        print $0;
        print "";
        print entry;
        next;
    }
    /^## Development History$/ {
        print $0;
        print "";
        print entry;
        next;
    }
    { print $0 }
    ' "$DEV_LOG_PATH" > "${DEV_LOG_PATH}.new"
    
    mv "${DEV_LOG_PATH}.new" "$DEV_LOG_PATH"
fi

# Clean up
rm -f "$TEMP_FILE"

# Check if we need to commit the dev log update
if git diff --quiet "$DEV_LOG_PATH"; then
    echo -e "${YELLOW}No changes made to $DEV_LOG_PATH${NC}"
else
    echo -e "${GREEN}Updated $DEV_LOG_PATH with new entry${NC}"
    
    # Check if we should auto-commit the dev log update
    if [ "${AUTO_COMMIT_DEV_LOG:-false}" = "true" ]; then
        git add "$DEV_LOG_PATH"
        git commit -m "docs: update dev log for commit $COMMIT_HASH" --no-verify
        echo -e "${GREEN}Automatically committed dev log update${NC}"
    else
        echo -e "${BLUE}Remember to commit the dev log update:${NC}"
        echo "  git add $DEV_LOG_PATH"
        echo "  git commit -m \"docs: update dev log for commit $COMMIT_HASH\" --no-verify"
    fi
fi

# Check if we need to do a documentation refresh (every 10 commits)
COMMIT_COUNT=$(git rev-list --count HEAD)
if [ $((COMMIT_COUNT % 10)) -eq 0 ]; then
    echo -e "${YELLOW}This is commit #$COMMIT_COUNT - time for a documentation refresh!${NC}"
    echo -e "${BLUE}Please verify that all documentation is up-to-date:${NC}"
    echo "1. Check that all file paths in docs are correct"
    echo "2. Update architecture diagrams if needed"
    echo "3. Verify environment setup instructions"
    echo "4. Ensure critical paths are still accurate"
fi

exit 0